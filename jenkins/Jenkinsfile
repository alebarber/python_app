pipeline {
    agent any

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'python:2-alpine'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Verificar la versión de Python y Docker dentro del contenedor
                sh 'python --version'
                sh 'docker --version'

                // Aquí podrías agregar los comandos de instalación de dependencias o compilación
                // Ejemplo: instalar requerimientos
                sh 'pip install -r requirements.txt'
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'qnib/pytest'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Aquí llamas a tus pruebas, ajustando la ruta si es necesario
                sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
            }
            post {
                always {
                    // Archivar los resultados de las pruebas
                    junit '**/test-reports/*.xml'
                }
            }
        }

        stage('Deliver') {
            agent {
                docker {
                    image 'cdrx/pyinstaller-linux:python2'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Comando para empaquetar el archivo Python con PyInstaller
                sh 'pyinstaller --onefile sources/add2vals.py'
            }
            post {
                success {
                    // Archivar el artefacto generado
                    archiveArtifacts 'dist/add2vals'
                }
            }
        }
    }
}
