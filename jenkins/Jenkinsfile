pipeline {
    agent any  // Esto se asegura de que el pipeline se ejecute en cualquier nodo disponible

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'python:2-alpine'  // Especifica la imagen Docker para esta etapa
                    args '-v /var/run/docker.sock:/var/run/docker.sock'  // Montaje del socket Docker
                }
            }
            steps {
                script {
                    sh 'python -m py_compile sources/add2vals.py sources/calc.py'  // Ejecutar los pasos de compilación
                }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'qnib/pytest'  // Imagen Docker para testing
                    args '-v /var/run/docker.sock:/var/run/docker.sock'  // Montaje del socket Docker
                }
            }
            steps {
                script {
                    sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'  // Ejecutar pruebas
                }
            }
            post {
                always {
                    junit '**/test-reports/*.xml'  // Publicar los resultados de las pruebas
                }
            }
        }

        stage('Deliver') {
            agent {
                docker {
                    image 'cdrx/pyinstaller-linux:python2'  // Imagen Docker para entrega
                    args '-v /var/run/docker.sock:/var/run/docker.sock'  // Montaje del socket Docker
                }
            }
            steps {
                script {
                    sh 'pyinstaller --onefile sources/add2vals.py'  // Crear ejecutable
                }
            }
            post {
                success {
                    archiveArtifacts 'dist/add2vals'  // Archivar artefactos de la construcción
                }
            }
        }
    }
}
