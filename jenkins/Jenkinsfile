pipeline {
    agent none
    environment {
        DOCKER_IMAGE = 'python:3.9'
        DOCKER_FILE = 'Dockerfile'
    }
    stages {
        // Etapa de construcción de la imagen Docker para la aplicación
        stage('Build') {
            agent {
                docker {
                    image 'python:3.9'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'  // Permite acceso a Docker desde dentro del contenedor
                }
            }
            steps {
                script {
                    // Construir la imagen Docker de la aplicación
                    sh 'docker build -t python_app_image .'
                }
            }
        }

        // Etapa de pruebas (Pytest)
        stage('Test') {
            agent {
                docker {
                    image 'qnib/pytest'
                }
            }
            steps {
                // Ejecutar pruebas
                sh 'pytest --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
            }
            post {
                always {
                    junit 'test-reports/results.xml' // Publicar los resultados de las pruebas
                }
            }
        }

        // Etapa de despliegue de la aplicación usando Docker e integración con Terraform
        stage('Deploy') {
            agent {
                docker {
                    image 'python:3.9' // La imagen que se usará para ejecutar el despliegue
                    args '-v /var/run/docker.sock:/var/run/docker.sock' // Permitir ejecutar Docker desde dentro
                }
            }
            steps {
                script {
                    // Ejecutar Terraform para crear los contenedores Docker
                    sh '''
                        cd terraform/
                        terraform init
                        terraform apply -auto-approve
                    '''
                    // Desplegar la aplicación usando Docker (ejecutar la imagen)
                    sh '''
                        docker run -d --name python_app python_app_image
                    '''
                }
            }
        }
    }
    post {
        always {
            // Aquí puedes añadir cualquier paso que siempre debe ejecutarse, como limpiar o cerrar contenedores
        }
    }
}
